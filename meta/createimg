#!/bin/sh
# Copyright (C) 2004-2021 Soner Tari
#
# This file is part of UTMFW.
#
# UTMFW is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# UTMFW is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with UTMFW.  If not, see <http://www.gnu.org/licenses/>.

ARCH=arm64

ROOT_PATH=$(pwd)
VERSION='6.9'
SUBVERSION=_$(date +%Y%m%d)
VMAJ=${VERSION%%\.*}
VMIN=${VERSION##*\.}

TMP=tmp

SITE_DIR=site
SITE_CONTENTS="install.site install.sub root.mail"
SITE_FILE=site${VMAJ}${VMIN}.tgz

PROJECT_NAME=pffw

LOCALE_PATH=locale
LOCALES_LIST="tr_TR"

WEBIF=webif
WEBIF_FILE=pffw-$WEBIF-${VMAJ}.${VMIN}.tar.gz

CONFIG=config
CONFIG_FILE=pffw-$CONFIG-${VMAJ}.${VMIN}.tar.gz

PKG_PATH=packages

EXCLUDE_FROM_SHA256="SHA256 SHA256.sig"
# PFFW uses the same install sets as UTMFW, hence the same secret key
# bsd.rd uses the UTMFW .pub file to verify the install sets
SECRET_KEY=$ROOT_PATH/docs/signify/utmfw-${VMAJ}${VMIN}.sec

CD_PATH=cd/${ARCH}
INSTALL_SETS_PATH=${VERSION}/${ARCH}
IMG_FILE=pffw${VMAJ}${VMIN}${SUBVERSION}_${ARCH}.img
SYS_ID="OpenBSD ${VERSION} ${ARCH}"
VOL_ID="PFFW ${VERSION}${SUBVERSION} ${ARCH}"
PREP_ID="Soner Tari <sonertari@gmail.org>"
PUBLISH_ID="Copyright (C) 2021 Soner Tari, The PFFW project"
APP_ID="PFFW is a pf firewall running on OpenBSD ${VERSION}"

echo $SYS_ID
echo $VOL_ID
echo $APP_ID
echo "========================="

echo "Cloning $PROJECT_NAME git repo"

mkdir $ROOT_PATH/$TMP/
cd $ROOT_PATH/$TMP/
rm -rf *
git clone $ROOT_PATH

echo "Generating gettext translations"

for locale in $LOCALES_LIST; do
	cd $ROOT_PATH/$TMP/$PROJECT_NAME/src/View/$LOCALE_PATH/$locale/LC_MESSAGES
	msgfmt -o pffw.mo pffw.po
done

echo "Generating source documention"

cd $ROOT_PATH/$TMP/$PROJECT_NAME
doxygen Doxyfile

echo "Creating $WEBIF package: $WEBIF_FILE"

cd $ROOT_PATH/$TMP/$PROJECT_NAME
rm -rf $PROJECT_NAME
mv src $PROJECT_NAME
tar czf $ROOT_PATH/$TMP/$WEBIF_FILE $PROJECT_NAME
ln -fs $ROOT_PATH/$TMP/$WEBIF_FILE $ROOT_PATH/$CD_PATH/$PKG_PATH/$WEBIF_FILE

echo "Creating $CONFIG package: $CONFIG_FILE"

cd $ROOT_PATH/$TMP/$PROJECT_NAME
tar czf $ROOT_PATH/$TMP/$CONFIG_FILE $CONFIG
ln -fs $ROOT_PATH/$TMP/$CONFIG_FILE $ROOT_PATH/$CD_PATH/$PKG_PATH/$CONFIG_FILE

echo "Creating site install set: $SITE_FILE"

mkdir $ROOT_PATH/$SITE_DIR
cd $ROOT_PATH/$SITE_DIR
doas rm -rf *
for site in $SITE_CONTENTS; do
	cp -R $ROOT_PATH/meta/$site .
done
mkdir etc
cp -R $ROOT_PATH/openbsd/$INSTALL_SETS_PATH/firmware ./etc/
echo "set tty fb0" > ./etc/boot.conf
doas chown -R root:wheel *
tar czhf $SITE_FILE $SITE_CONTENTS etc
ln -fs $ROOT_PATH/$SITE_DIR/$SITE_FILE $ROOT_PATH/$CD_PATH/$INSTALL_SETS_PATH/$SITE_FILE

echo "Generating SHA256.sig"

cd $ROOT_PATH/$CD_PATH/$INSTALL_SETS_PATH/
for exclude in $EXCLUDE_FROM_SHA256; do
	rm $exclude
done

cksum -a SHA256 * > SHA256
signify -S -s $SECRET_KEY -m SHA256 -e -x SHA256.sig
rm SHA256

echo "Creating image: $IMG_FILE"

cd $ROOT_PATH/$CD_PATH

# All sizes are in sectors
MSDOSSTART=32768
MSDOSSIZE=16384
FFSSTART=$(($MSDOSSTART + $MSDOSSIZE))

# Size of cd/arm64, trim trailing white spaces by adding 0
CD_SIZE=$(($(du -L -s . | cut -d . -f 1) + 0))
echo "CD size $CD_SIZE sectors"

# Add overhead for ffs
FS_SIZE=$(($CD_SIZE + 8192))
echo "FS size $FS_SIZE sectors"

# Add end of msdos part
IMG_SIZE=$(($FS_SIZE + $FFSSTART))
echo "Image size $IMG_SIZE sectors"

cd $ROOT_PATH
rm $IMG_FILE

doas umount ./img_ffs
doas umount ./img_msdos
doas vnconfig -u vnd0

# 1 sector = 512 bytes
# SECURITY: Do not seek, write zeros
#dd if=/dev/zero of=$IMG_FILE bs=512 count=0 seek=$IMG_SIZE
dd if=/dev/zero of=$IMG_FILE bs=512 count=$IMG_SIZE

doas vnconfig vnd0 $IMG_FILE

echo "reinit\ne 0\nC\nn\n$MSDOSSTART\n$MSDOSSIZE\nf 0\ne 3\nA6\nn\n$FFSSTART\n*\nw\nq\n" | doas fdisk -e vnd0 >/dev/null
doas fdisk vnd0

echo "a a\n\n\n\nw\nq\n" | doas disklabel -E vnd0 >/dev/null
doas disklabel vnd0

doas newfs -O 1 -m 0 -o space -i $FS_SIZE -c $CD_SIZE /dev/rvnd0a

doas newfs_msdos -L boot -c 1 -F 16 /dev/rvnd0i

mkdir ./img_ffs
doas mount /dev/vnd0a ./img_ffs

mkdir ./img_msdos
doas mount -o-l /dev/vnd0i ./img_msdos

doas cp -R -L -v $ROOT_PATH/$CD_PATH/* ./img_ffs/

doas cp -R -v openbsd/$INSTALL_SETS_PATH/BOOT/* ./img_msdos
echo "$VOL_ID\n$SYS_ID\n$APP_ID\n$PUBLISH_ID\n$PREP_ID" > ./img_msdos/README.txt

doas umount ./img_ffs
doas umount ./img_msdos
doas vnconfig -u vnd0
